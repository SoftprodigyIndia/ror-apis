{"version":3,"sources":["webpack:///src/app/users/add-edit.component.ts","webpack:///src/app/users/add-edit.component.html","webpack:///src/app/users/layout.component.ts","webpack:///src/app/users/layout.component.html","webpack:///src/app/users/list.component.ts","webpack:///src/app/users/list.component.html","webpack:///src/app/users/users-routing.module.ts","webpack:///src/app/users/users.module.ts"],"names":["AddEditComponent","formBuilder","route","router","accountService","alertService","loading","submitted","mySelect","roles","userRole","text","adminMode","id","snapshot","params","user","subscribe","x","isAddMode","passwordValidators","minLength","push","required","form","group","name","email","password","role","file","fileSource","image","getById","pipe","f","setValue","added_image","value","clear","invalid","createUser","updateUser","register","data","success","keepAfterRouteChange","navigate","relativeTo","error","undefined","uploadData","FormData","append","update_image","check_password_field","update","values","event","reader","FileReader","target","files","length","readAsDataURL","onload","imageSrc","result","controls","onSubmit","templateUrl","LayoutComponent","ListComponent","users","admin_id","getAll","find","isDeleting","filter","logout","routes","path","component","children","UsersRoutingModule","forChild","imports","exports","UsersModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACDA;;AAAsB;;AAAQ;;;;;;AAC9B;;AAAuB;;AAAS;;;;;;AAOhB;;AAAoC;;AAAgB;;;;;;AADxD;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;AAOL;;AAAqC;;AAAiB;;;;;;AACtD;;AAAkC;;AAAmB;;;;;;AAFzD;;AACI;;AACA;;AACJ;;;;;;AAFS;;AAAA;;AACA;;AAAA;;;;;;AAUL;;AAAwB;;AAA+B;;;;;;AAEnD;;AAAwC;;AAAoB;;;;;;AAC5D;;AAAyC;;AAAsC;;;;;;AAFnF;;AACI;;AACA;;AACJ;;;;;;AAFS;;AAAA;;AACA;;AAAA;;;;;;AASX;;AACI;;AACJ;;;;;;AAFQ;;AACJ;;AAAA;;;;;;;;;;;;;;AANN;;AACE;;AACI;;AACJ;;AACF;;AAAyB;AAAA;;AAAA;;AAAA;AAAA,aAAsB,QAAtB,EAAsB;AAAA;;AAAA;;AAAA;AAAA,WAAtB;;AACvB;;AAGF;;AACA;;AACF;;;;;;AAN2B;;AAAA,+FAAsB,gBAAtB,EAAsB,qEAAtB;;AACS;;AAAA;;AAIU;;AAAA;;;;;;AAYxC;;AAAoC;;AAAiB;;;;;;AADvD;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;;;AATf;;AACI;;AACA;;AAKI;AAAA;;AAAA;;AAAA;AAAA;;AALJ;;AAMI;;AAGJ;;AACF;;;;;;AAJW;;AAAA;;;;;;AAQX;;AAA6C;;AAAa;;;;;;AAC1D;;;;;;AAAK;;;;;;AAGL;;AAA6C;;AAAgB;;;;;;AAC7D;;;;;;AAAK;;;;;;AAKD;;;;;;;;;;UDvDCA,gB;AAYT,kCACYC,WADZ,EAEYC,KAFZ,EAGYC,MAHZ,EAIYC,cAJZ,EAKYC,YALZ,EAKsC;AAAA;;AAJ1B,eAAAJ,WAAA,GAAAA,WAAA;AACA,eAAAC,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,cAAA,GAAAA,cAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AAbZ,eAAAC,OAAA,GAAU,KAAV;AACA,eAAAC,SAAA,GAAY,KAAZ;AACA,eAAAC,QAAA,GAAW,GAAX;AA2IE,eAAAC,KAAA,GAAgB,CAAC;AAACC,oBAAQ,EAAE,GAAX;AAAgBC,gBAAI,EAAE;AAAtB,WAAD,EAAoC;AAACD,oBAAQ,EAAE,GAAX;AAAgBC,gBAAI,EAAE;AAAtB,WAApC,CAAhB;AA9HD;;;;qCAEU;AAAA;;AACT,iBAAKC,SAAL,GAAiB,KAAjB;AACA,iBAAKC,EAAL,GAAU,KAAKX,KAAL,CAAWY,QAAX,CAAoBC,MAApB,CAA2B,IAA3B,CAAV;;AACA,gBAAI,KAAKF,EAAL,IAAW,UAAf,EAA0B;AACxB,mBAAKT,cAAL,CAAoBY,IAApB,CAAyBC,SAAzB,CAAmC,UAAAC,CAAC,EAAI;AACxC,qBAAI,CAACL,EAAL,GAAUK,CAAC,CAACL,EAAZ;AACA,qBAAI,CAACD,SAAL,GAAiB,IAAjB;AACD,eAHC;AAID;;AACC,iBAAKO,SAAL,GAAiB,CAAC,KAAKN,EAAvB,CATO,CAUP;AAEA;;AACA,gBAAMO,kBAAkB,GAAG,CAAC,0DAAWC,SAAX,CAAqB,CAArB,CAAD,CAA3B;;AACA,gBAAI,KAAKF,SAAT,EAAoB;AAChBC,gCAAkB,CAACE,IAAnB,CAAwB,0DAAWC,QAAnC;AACH;;AAED,iBAAKC,IAAL,GAAY,KAAKvB,WAAL,CAAiBwB,KAAjB,CAAuB;AAC/BC,kBAAI,EAAE,CAAC,EAAD,EAAK,0DAAWH,QAAhB,CADyB;AAE/BI,mBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWJ,QAAZ,EAAuB,0DAAWI,KAAlC,CAAL,CAFwB;AAG/BC,sBAAQ,EAAE,CAAC,EAAD,EAAKR,kBAAL,CAHqB;AAI/BS,kBAAI,EAAE,CAAC,KAAKrB,QAAN,CAJyB;AAK/BsB,kBAAI,EAAE,EALyB;AAM/BC,wBAAU,EAAE,EANmB;AAO/BC,mBAAK,EAAE;AAPwB,aAAvB,CAAZ;;AAUA,gBAAI,CAAC,KAAKb,SAAV,EAAqB;AACjB,mBAAKf,cAAL,CAAoB6B,OAApB,CAA4B,KAAKpB,EAAjC,EACKqB,IADL,CACU,8DADV,EAEKjB,SAFL,CAEe,UAAAC,CAAC,EAAI;AACdA,iBAAC,GAAGA,CAAC,CAAC,MAAD,CAAL;;AACE,qBAAI,CAACiB,CAAL,CAAOT,IAAP,CAAYU,QAAZ,CAAqBlB,CAAC,CAACQ,IAAvB;;AACA,qBAAI,CAACS,CAAL,CAAOR,KAAP,CAAaS,QAAb,CAAsBlB,CAAC,CAACS,KAAxB;;AACA,qBAAI,CAACQ,CAAL,CAAON,IAAP,CAAYO,QAAZ,CAAqBlB,CAAC,CAACW,IAAvB;;AACA,qBAAI,CAACrB,QAAL,GAAgBU,CAAC,CAACW,IAAlB;AACA,qBAAI,CAACQ,WAAL,GAAmBnB,CAAC,CAACc,KAArB;AACH,eATL;AAUH;AACJ,W,CAED;;;;mCAGSM,K,EAAK;AACZ,iBAAKH,CAAL,CAAON,IAAP,CAAYO,QAAZ,CAAqBE,KAArB;AACD;;;qCAEU;AACP,iBAAK/B,SAAL,GAAiB,IAAjB,CADO,CAGP;;AACA,iBAAKF,YAAL,CAAkBkC,KAAlB,GAJO,CAOP;;AACA,gBAAI,KAAKf,IAAL,CAAUgB,OAAd,EAAuB;AACnB;AACH;;AAED,iBAAKlC,OAAL,GAAe,IAAf;;AACA,gBAAI,KAAKa,SAAT,EAAoB;AAChB,mBAAKsB,UAAL;AACH,aAFD,MAEO;AACH,mBAAKC,UAAL;AACH;AACJ;;;uCAEoB;AAAA;;AACjB,iBAAKtC,cAAL,CAAoBuC,QAApB,CAA6B,KAAKnB,IAAL,CAAUc,KAAvC,EACKJ,IADL,CACU,8DADV,EAEKjB,SAFL,CAGQ,UAAA2B,IAAI,EAAI;AACJ,oBAAI,CAACvC,YAAL,CAAkBwC,OAAlB,CAA0B,yBAA1B,EAAqD;AAAEC,oCAAoB,EAAE;AAAxB,eAArD;;AACA,oBAAI,CAAC3C,MAAL,CAAY4C,QAAZ,CAAqB,CAAC,GAAD,EAAM;AAAEC,0BAAU,EAAE,MAAI,CAAC9C;AAAnB,eAAN,CAArB;AACH,aANT,EAOQ,UAAA+C,KAAK,EAAI;AACL,oBAAI,CAAC5C,YAAL,CAAkB4C,KAAlB,CAAwBA,KAAxB;;AACA,oBAAI,CAAC3C,OAAL,GAAe,KAAf;AACH,aAVT;AAWH;;;uCAEoB;AAAA;;AACnB,gBAAI,KAAK0B,KAAL,IAAckB,SAAlB,EAA4B;AAC1B,kBAAMC,UAAU,GAAG,IAAIC,QAAJ,EAAnB;AACAD,wBAAU,CAACE,MAAX,CAAkB,OAAlB,EAA2B,KAAKrB,KAAhC,EAAuC,KAAKA,KAAL,CAAWN,IAAlD;AACA,mBAAKtB,cAAL,CAAoBkD,YAApB,CAAiC,KAAKzC,EAAtC,EAA0CsC,UAA1C,EACGjB,IADH,CACQ,8DADR,EAEGjB,SAFH,CAGM,UAAA2B,IAAI,EAAI;AACN,sBAAI,CAACW,oBAAL,CAA0B,MAAI,CAAC/B,IAAL,CAAUc,KAApC;;AACA,sBAAI,CAAClC,cAAL,CAAoBoD,MAApB,CAA2B,MAAI,CAAC3C,EAAhC,EAAoC,MAAI,CAACW,IAAL,CAAUc,KAA9C,EACKJ,IADL,CACU,8DADV,EAEKjB,SAFL,CAGQ,UAAA2B,IAAI,EAAI;AACJ,wBAAI,CAACvC,YAAL,CAAkBwC,OAAlB,CAA0B,mBAA1B,EAA+C;AAAEC,wCAAoB,EAAE;AAAxB,mBAA/C;;AACA,wBAAI,CAAC3C,MAAL,CAAY4C,QAAZ,CAAqB,CAAC,IAAD,EAAO;AAAEC,8BAAU,EAAE,MAAI,CAAC9C;AAAnB,mBAAP,CAArB;AACH,iBANT,EAOQ,UAAA+C,KAAK,EAAI;AACL,wBAAI,CAAC5C,YAAL,CAAkB4C,KAAlB,CAAwBA,KAAxB;;AACA,wBAAI,CAAC3C,OAAL,GAAe,KAAf;AACH,iBAVT;AAWD,eAhBP,EAiBM,UAAA2C,KAAK,EAAI;AACL,sBAAI,CAAC5C,YAAL,CAAkB4C,KAAlB,CAAwBA,KAAxB;;AACA,sBAAI,CAAC3C,OAAL,GAAe,KAAf;AACH,eApBP;AAqBC,aAxBH,MAyBM;AACF,mBAAKiD,oBAAL,CAA0B,KAAK/B,IAAL,CAAUc,KAApC;AACA,mBAAKlC,cAAL,CAAoBoD,MAApB,CAA2B,KAAK3C,EAAhC,EAAoC,KAAKW,IAAL,CAAUc,KAA9C,EACKJ,IADL,CACU,8DADV,EAEKjB,SAFL,CAGQ,UAAA2B,IAAI,EAAI;AACJ,sBAAI,CAACvC,YAAL,CAAkBwC,OAAlB,CAA0B,mBAA1B,EAA+C;AAAEC,sCAAoB,EAAE;AAAxB,iBAA/C;;AACA,sBAAI,CAAC3C,MAAL,CAAY4C,QAAZ,CAAqB,CAAC,IAAD,EAAO;AAAEC,4BAAU,EAAE,MAAI,CAAC9C;AAAnB,iBAAP,CAArB;AACH,eANT,EAOQ,UAAA+C,KAAK,EAAI;AACL,sBAAI,CAAC5C,YAAL,CAAkB4C,KAAlB,CAAwBA,KAAxB;;AACA,sBAAI,CAAC3C,OAAL,GAAe,KAAf;AACH,eAVT;AAWD;AACJ;;;+CAGsBmD,M,EAAM;AACzB,gBAAIA,MAAM,CAAC,UAAD,CAAN,IAAsB,EAA1B,EAA6B;AAC3B,qBAAOA,MAAM,CAAC,UAAD,CAAb;AACD;AACF;;;uCAEUC,K,EAAO;AAAA;;AACpB,gBAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEA,gBAAGF,KAAK,CAACG,MAAN,CAAaC,KAAb,IAAsBJ,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmBC,MAA5C,EAAoD;AAAA,uDACnCL,KAAK,CAACG,MAAN,CAAaC,KADsB;AAAA,kBAC3ChC,IAD2C;;AAElD6B,oBAAM,CAACK,aAAP,CAAqBlC,IAArB;;AAEA6B,oBAAM,CAACM,MAAP,GAAgB,YAAM;AAEpB,sBAAI,CAACC,QAAL,GAAgBP,MAAM,CAACQ,MAAvB;AACA,sBAAI,CAACnC,KAAL,GAAa0B,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AAED,eALD;AAOD;AACF;;;8BAxGS;AAAE,mBAAO,KAAKtC,IAAL,CAAU4C,QAAjB;AAA4B;;;;;;;yBAhE7BpE,gB,EAAgB,2H,EAAA,+H,EAAA,uH,EAAA,6H,EAAA,2H;AAAA,O;;;cAAhBA,gB;AAAgB,qC;AAAA,iB;AAAA,gB;AAAA,imD;AAAA;AAAA;AChB7B;;AACA;;AACA;;AAAyB;AAAA,qBAAY,IAAAqE,QAAA,EAAZ;AAAsB,aAAtB;;AACrB;;AACI;;AACE;;AAAmB;;AAAI;;AACrB;;AACA;;AAGJ;;AACA;;AACM;;AAAmB;;AAAK;;AAC1B;;AACA;;AAIJ;;AACJ;;AACE;;AACM;;AACI;;AACI;;AACJ;;AACA;;AACA;;AACA;;AAIJ;;AACF;;AACE;;AAWJ;;AACF;;AAaA;;AACF;;AACE;;AACE;;AACA;;AACA;;AACF;;AACE;;AACA;;AACF;;AACF;;AACA;;AACI;;AACI;;AACA;;AACJ;;AACA;;AAA4C;;AAAM;;AACtD;;AACJ;;;;AA5EI;;AACA;;AAAA;;AACE;;AAAA;;AAIqE;;AAAA;;AAC1D;;AAAA;;AAM2D;;AAAA;;AAC3D;;AAAA;;AAWsE;;AAAA;;AAClE;;AAAA;;AACA;;AAAA;;AAMJ;;AAAA;;AAYN;;AAAA;;AAgBqB;;AAAA;;AACC;;AAAA;;AAGE;;AAAA;;AACL;;AAAA;;AAId;;AAAA;;AACE;;AAAA;;;;;;;;;wEDvDLrE,gB,EAAgB;gBAF5B,uDAE4B;iBAFlB;AAAEsE,uBAAW,EAAE;AAAf,W;AAEkB,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEhB7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAGaC,e;;;;;yBAAAA,e;AAAe,O;;;cAAfA,e;AAAe,qC;AAAA,gB;AAAA,e;AAAA,8C;AAAA;AAAA;ACH5B;;AACI;;AACI;;AACJ;;AACJ;;;;;;;;;wEDDaA,e,EAAe;gBAD3B,uDAC2B;iBADjB;AAAED,uBAAW,EAAE;AAAf,W;AACiB,U;;;;;;;;;;;;;;;;;;AEH5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACyBU;;;;;;AAAK;;;;;;AACe;;AAAI;;AAAQ;;;;;;AAGlC;;;;;;AACA;;AAA+B;;AAAM;;;;;;AAEzC;;AACI;;AACI;;AACJ;;AACJ;;;;;;;;AAjBF;;AACE;;AACE;;AAAgB;;AAAW;;AAC3B;;AAAI;;AAAa;;AACjB;;AAAI;;AAAc;;AAClB;;AAAI;;AAAkB;;AACtB;;AAAI;;AAAJ;;AACA;;AACA;;AAA0E;;AAAI;;AAC9E;;AAAI;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACV;;AACA;;AAA4C;;AAAS;;AACzD;;AACA;;AAKF;;;;;;;;;;AAhBoB;;AAAA;;AACZ;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACwB;;AAAA,0FAAkC,UAAlC,EAAkC,GAAlC;;AAEzB;;AAAA;;AACqF;;AAAA;;AAChF;;AAAA;;AACA;;AAAA;;AAEN;;AAAA;;;;UD1BKE,a;AAMT,+BAAoBpE,cAApB,EAAoD;AAAA;;AAAhC,eAAAA,cAAA,GAAAA,cAAA;AALpB,eAAAqE,KAAA,GAAQ,IAAR;AACA,eAAAnE,OAAA,GAAU,KAAV;AACA,eAAA0B,KAAA,GAAQ,IAAR;AACA,eAAA0C,QAAA,GAAW,IAAX;AAEsD;;;;qCAE3C;AAAA;;AACP,iBAAKtE,cAAL,CAAoBuE,MAApB,GACKzC,IADL,CACU,8DADV,EAEKjB,SAFL,CAEe,UAAAwD,KAAK;AAAA,qBAAI,MAAI,CAACA,KAAL,GAAaA,KAAK,CAAC,OAAD,CAAtB;AAAA,aAFpB;AAGH;;;qCAEU5D,E,EAAY;AAAA;;AACnB,gBAAMG,IAAI,GAAG,KAAKyD,KAAL,CAAWG,IAAX,CAAgB,UAAA1D,CAAC;AAAA,qBAAIA,CAAC,CAACL,EAAF,KAASA,EAAb;AAAA,aAAjB,CAAb;AACAG,gBAAI,CAAC6D,UAAL,GAAkB,IAAlB;AACA,iBAAKzE,cAAL,WAA2BS,EAA3B,EACKqB,IADL,CACU,8DADV,EAEKjB,SAFL,CAEe,YAAM;AAGb,oBAAI,CAACwD,KAAL,GAAa,MAAI,CAACA,KAAL,CAAWK,MAAX,CAAkB,UAAA5D,CAAC;AAAA,uBAAIA,CAAC,CAACL,EAAF,KAASA,EAAb;AAAA,eAAnB,CAAb;AACH,aANL;AAOH;;;mCACQ;AACL,iBAAKT,cAAL,CAAoB2E,MAApB;AAEH;;;;;;;yBA5BQP,a,EAAa,6H;AAAA,O;;;cAAbA,a;AAAa,qC;AAAA,iB;AAAA,e;AAAA,wwB;AAAA;AAAA;ACN1B;;AACI;;AACE;;AACE;;AAAK;;AAAc;;AACjB;;AAA+D;;AAAW;;AAC1E;;AAA0E;;AAAY;;AAC1F;;AACA;;AACJ;;AACE;;AACE;;AAAgB;;AAAG;;AACnB;;AAAgB;;AAAI;;AACpB;;AAAgB;;AAAK;;AACrB;;AAAgB;;AAAS;;AACzB;;AAAgB;;AAAK;;AACrB;;AAAgB;;AAAI;;AACpB;;AAAgB;;AAAM;;AACxB;;AACF;;AACA;;AAmBF;;AACI;;AACJ;;;;AArBS;;AAAA;;;;;;;;;wEDbIA,a,EAAa;gBADzB,uDACyB;iBADf;AAAEF,uBAAW,EAAE;AAAf,W;AACe,U;;;;;;;;;;;;;;;;;;;;;;AEN1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAOA,UAAMU,MAAM,GAAW,CACnB;AACIC,YAAI,EAAE,EADV;AACcC,iBAAS,EAAE,iEADzB;AAEIC,gBAAQ,EAAE,CACN;AAAEF,cAAI,EAAE,EAAR;AAAYC,mBAAS,EAAE;AAAvB,SADM,EAEN;AAAED,cAAI,EAAE,KAAR;AAAeC,mBAAS,EAAE;AAA1B,SAFM,EAGN;AAAED,cAAI,EAAE,UAAR;AAAoBC,mBAAS,EAAE;AAA/B,SAHM;AAFd,OADmB,CAAvB;;UAeaE,kB;;;;;cAAAA;;;;2BAAAA,kB;AAAkB,S;AAAA,kBAHlB,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CAGkB,EAFjB,4DAEiB;;;;4HAAlBI,kB,EAAkB;AAAA;AAAA,oBAFjB,4DAEiB;AAAA,S;AAFL,O;;;;;wEAEbA,kB,EAAkB;gBAJ9B,sDAI8B;iBAJrB;AACNE,mBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBL,MAAtB,CAAD,CADH;AAENO,mBAAO,EAAE,CAAC,4DAAD;AAFH,W;AAIqB,U;;;;;;;;;;;;;;;;;;ACtB/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAsBaC,W;;;;;cAAAA;;;;2BAAAA,W;AAAW,S;AAAA,kBAZX,CACL,4DADK,EAEL,kEAFK,EAGL,wEAHK,EAIL,0DAJK,CAYW;;;;4HAAXA,W,EAAW;AAAA,yBALhB,iEAKgB,EAJhB,6DAIgB,EAHhB,oEAGgB;AAHA,oBARhB,4DAQgB,EAPhB,kEAOgB,EANhB,wEAMgB,EALhB,0DAKgB;AAGA,S;AARL,O;;;;;wEAQNA,W,EAAW;gBAbvB,sDAauB;iBAbd;AACNF,mBAAO,EAAE,CACL,4DADK,EAEL,kEAFK,EAGL,wEAHK,EAIL,0DAJK,CADH;AAONG,wBAAY,EAAE,CACV,iEADU,EAEV,6DAFU,EAGV,oEAHU;AAPR,W;AAac,U","file":"users-users-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormsModule } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\n\nexport interface Role {\n  userRole: string;\n  text: string;\n}\n\n\n@Component({ templateUrl: 'add-edit.component.html' })\n\nexport class AddEditComponent implements OnInit {\n    form: FormGroup;\n    id: string;\n    isAddMode: boolean;\n    loading = false;\n    submitted = false;\n    mySelect = \"0\";\n    imageSrc: string;\n    image: File;\n    adminMode: boolean;\n    added_image: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) {\n    }\n\n    ngOnInit() {\n      this.adminMode = false;\n      this.id = this.route.snapshot.params['id'];\n      if (this.id == \"admin_id\"){\n        this.accountService.user.subscribe(x => {\n        this.id = x.id;\n        this.adminMode = true;\n      });\n      }\n        this.isAddMode = !this.id;\n        // this.isAddMode = !this.id;\n\n        // password not required in edit mode\n        const passwordValidators = [Validators.minLength(6)];\n        if (this.isAddMode) {\n            passwordValidators.push(Validators.required);\n        }\n\n        this.form = this.formBuilder.group({\n            name: ['', Validators.required],\n            email: ['', [Validators.required,  Validators.email]],\n            password: ['', passwordValidators],\n            role: [this.mySelect],\n            file: '',\n            fileSource: '',\n            image: \"\",\n        });\n\n        if (!this.isAddMode) {\n            this.accountService.getById(this.id)\n                .pipe(first())\n                .subscribe(x => {\n                  x = x[\"user\"]\n                    this.f.name.setValue(x.name);\n                    this.f.email.setValue(x.email);\n                    this.f.role.setValue(x.role);\n                    this.mySelect = x.role;\n                    this.added_image = x.image;\n                });\n        }\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onChange(value){\n      this.f.role.setValue(value)\n    }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        if (this.isAddMode) {\n            this.createUser();\n        } else {\n            this.updateUser();\n        }\n    }\n\n    private createUser() {\n        this.accountService.register(this.form.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.alertService.success('User added successfully', { keepAfterRouteChange: true });\n                    this.router.navigate(['.', { relativeTo: this.route }]);\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n\n    private updateUser() {\n      if (this.image != undefined){\n        const uploadData = new FormData();\n        uploadData.append('image', this.image, this.image.name);\n        this.accountService.update_image(this.id, uploadData)\n          .pipe(first())\n          .subscribe(\n              data => {\n                this.check_password_field(this.form.value)\n                this.accountService.update(this.id, this.form.value)\n                    .pipe(first())\n                    .subscribe(\n                        data => {\n                            this.alertService.success('Update successful', { keepAfterRouteChange: true });\n                            this.router.navigate(['..', { relativeTo: this.route }]);\n                        },\n                        error => {\n                            this.alertService.error(error);\n                            this.loading = false;\n                        });\n              },\n              error => {\n                  this.alertService.error(error);\n                  this.loading = false;\n              });\n        }\n        else{\n          this.check_password_field(this.form.value)\n          this.accountService.update(this.id, this.form.value)\n              .pipe(first())\n              .subscribe(\n                  data => {\n                      this.alertService.success('Update successful', { keepAfterRouteChange: true });\n                      this.router.navigate(['..', { relativeTo: this.route }]);\n                  },\n                  error => {\n                      this.alertService.error(error);\n                      this.loading = false;\n                  });\n        }\n    }\n      roles: Role[] = [{userRole: \"0\", text: 'Customer'}, {userRole: \"1\", text: 'Staff'}];\n\n      check_password_field(values){\n        if (values[\"password\"] == \"\"){\n          delete values[\"password\"];\n        }\n      }\n\n    onFileChange(event) {\n    const reader = new FileReader();\n\n    if(event.target.files && event.target.files.length) {\n      const [file] = event.target.files;\n      reader.readAsDataURL(file);\n\n      reader.onload = () => {\n\n        this.imageSrc = reader.result as string;\n        this.image = event.target.files[0]\n\n      };\n\n    }\n  }\n}\n","<h1 *ngIf=\"isAddMode\">Add User</h1>\n<h1 *ngIf=\"!isAddMode\">Edit User</h1>\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-row\">\n        <div class=\"form-group col\">\n          <label for=\"name\"> Name</label>\n            <input type=\"text\" formControlName=\"name\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\" />\n            <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.name.errors.required\">Name is required</div>\n            </div>\n        </div>\n        <div class=\"form-group col\">\n              <label for=\"email\">Email</label>\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\" ng-pattern=\"pattern\">\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                <div *ngIf=\"f.email.errors.email\">Enter a valid email</div>\n            </div>\n        </div>\n    </div>\n      <div class=\"form-row\">\n            <div class=\"form-group col\">\n                <label for=\"password\">\n                    Password\n                </label>\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                <div *ngIf=\"!isAddMode\">(Leave Blank for same password)</div>\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                    <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n                </div>\n            </div>\n          <div class=\"form-group col-sm-3\">\n            <div *ngIf=\"!adminMode\">\n              <label for=\"role\">\n                  Select Role\n              </label>\n            <select name=\"my-select\" [(ngModel)]=\"mySelect\" [ngModelOptions]=\"{standalone: true}\" id=\"role\" (change)=\"onChange($event.target.value)\">\n              <option [value]=\"role.userRole\" *ngFor=\"let role of roles\">\n                  {{role.text}}\n              </option>\n            </select>\n            <input type=\"hidden\" formControlName=\"role\" value={{mySelect}}>\n          </div>\n        </div>\n      <div *ngIf=\"!isAddMode\" class=\"change_image\">\n          <div class=\"form-group\">\n          <input\n              formControlName=\"image\"\n              id=\"file\"\n              type=\"file\"\n              class=\"form-control\"\n              (change)=\"onFileChange($event)\">\n              <div *ngIf=\"f.file.touched && f.file.invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f.file.errors.required\">File is required.</div>\n              </div>\n          </div>\n        </div>\n      </div>\n    <div class=\"form-group row\">\n      <div class=\"form-group col image_preview\">\n        <label for=\"savedImage\" *ngIf=\"added_image\"> Saved Image: </label>\n        <img [src]=\"added_image\" *ngIf=\"added_image\" style=\"height: 200px; width:300px\" class=\"image_style\">\n        </div>\n      <div class=\"form-group col image_preview\">\n        <label for=\"selectedImage\" *ngIf=\"imageSrc\"> Selected Image: </label>\n        <img [src]=\"imageSrc\" *ngIf=\"imageSrc\" style=\"height: 200px; width:300px\" class=\"image_style\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n            Save\n        </button>\n        <a routerLink=\"/users\" class=\"btn btn-link\">Cancel</a>\n    </div>\n</form>\n","import { Component } from '@angular/core';\n\n@Component({ templateUrl: 'layout.component.html' })\nexport class LayoutComponent { }\n","<div class=\"p-4\">\n    <div class=\"container\">\n        <router-outlet></router-outlet>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService } from '@app/_services';\n\n@Component({ templateUrl: 'list.component.html' })\nexport class ListComponent implements OnInit {\n    users = null;\n    loading = false;\n    image = null\n    admin_id = null;\n\n    constructor(private accountService: AccountService) {}\n\n    ngOnInit() {\n        this.accountService.getAll()\n            .pipe(first())\n            .subscribe(users => this.users = users[\"users\"]);\n    }\n\n    deleteUser(id: string) {\n        const user = this.users.find(x => x.id === id);\n        user.isDeleting = true;\n        this.accountService.delete(id)\n            .pipe(first())\n            .subscribe(() => {\n\n\n                this.users = this.users.filter(x => x.id !== id)\n            });\n    }\n    logout() {\n        this.accountService.logout()\n\n    }\n}\n","<div class=\"p-4\">\n    <div class=\"container\">\n      <div class=\"container\">\n        <h1> List of users </h1>\n          <a routerLink=\"add\" class=\"btn btn-sm btn-success create_user\">Create user</a>\n          <a routerLink=\"edit/admin_id\" class=\"btn btn-sm btn-primary edit_profile\">Edit Profile</a>\n      </div>\n      <table class=\"table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">#ID</th>\n      <th scope=\"col\">Name</th>\n      <th scope=\"col\">Email</th>\n      <th scope=\"col\">Role Type</th>\n      <th scope=\"col\">Image</th>\n      <th scope=\"col\">Edit</th>\n      <th scope=\"col\">Delete</th>\n    </tr>\n  </thead>\n  <tbody *ngFor=\"let user of users\">\n    <tr>\n      <th scope=\"row\">{{user.id}}</th>\n      <td>{{user.name}}</td>\n      <td>{{user.email}}</td>\n      <td>{{user.role_type}}</td>\n      <td><img [src]=\"user.image\" *ngIf=\"user.image; else elseBlock\" style=\"height: 50px; width:50px\"></td>\n      <ng-template #elseBlock><td>No Image</td></ng-template>\n      <a routerLink=\"edit/{{user.id}}\" class=\"btn btn-sm btn-primary edit_user\">Edit</a>\n      <td><button (click)=\"deleteUser(user.id)\" class=\"btn btn-sm btn-danger btn-delete-user\" [disabled]=\"user.isDeleting\">\n        <span *ngIf=\"user.isDeleting\" class=\"spinner-border spinner-border-sm\"></span>\n        <span *ngIf=\"!user.isDeleting\">Delete</span></button></td>\n    </tr>\n    <tr *ngIf=\"!users\">\n        <td colspan=\"4\" class=\"text-center\">\n            <span class=\"spinner-border spinner-border-lg align-center\"></span>\n        </td>\n    </tr>\n  </tbody>\n</table>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LayoutComponent } from './layout.component';\nimport { ListComponent } from './list.component';\nimport { AddEditComponent } from './add-edit.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: LayoutComponent,\n        children: [\n            { path: '', component: ListComponent },\n            { path: 'add', component: AddEditComponent },\n            { path: 'edit/:id', component: AddEditComponent }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class UsersRoutingModule { }","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { UsersRoutingModule } from './users-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { ListComponent } from './list.component';\nimport { AddEditComponent } from './add-edit.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        UsersRoutingModule,\n        FormsModule\n    ],\n    declarations: [\n        LayoutComponent,\n        ListComponent,\n        AddEditComponent\n    ]\n})\nexport class UsersModule { }\n"]}